<genRule version="1.0.0" dstFilePath="script.lua" convertSrc="convertFunc.lua">
    <requiredLuaCode>easing.lua</requiredLuaCode>
    <requiredLuaCode>AE_Template.lua</requiredLuaCode>
    <codeBlocks>
    <global>^{dataModels[1]->initialize}^</global>
    
    <global>TIME_PER_FRAME = 1000 / COMPOSITION.FPS</global>
    <function name="initialize" param="scene" isCallBack="true">
    local snapshotNode = KuruSnapshotNode.create()
    scene:addNodeAndRelease(snapshotNode)
    
    bgColorNode = KuruClearNode.create(COMPOSITION.BG_COLOR)
    scene:addNodeAndRelease(bgColorNode)
    
    ^{_getInitializeDataModels(dataModels)}^
    solidObject = SolidObject:create(scene, snapshotNode:getSnapshot(), COMPOSITION.SIZE.WIDTH, COMPOSITION.SIZE.HEIGHT, COMPOSITION)
    ^{_getSoldObjectSetting(dataModels)}^
    :build()
scene:addNodeAndRelease(KuruBackgroundImageNode.createFromSampler(solidObject:getSampler(), BlendMode.Normal))
    </function>
    <function name="frameReady" param="scene, elapsedTime" isCallBack="true">
    local currentFrameIndex = getCurrentFrameIndex(scene)
    solidObject:frameReady(currentFrameIndex)
    </function>
    <function name="finalize" param="scene" isCallBack="true">
    </function>
    <function name="getCurrentFrameIndex" param="scene">

    local currentFrameIndex = math.floor(scene:getTotalElapsedTime() / TIME_PER_FRAME)
    if COMPOSITION.RepeatFrame == true then
        return currentFrameIndex % COMPOSITION.TOTAL_FRAME
    end

    return currentFrameIndex
    </function>
    </codeBlocks>
    <rootChildGenModels>
        <genModel modelType ="Composition" min="1" max="1"></genModel>
        <genModel modelType ="AnchorPoint" min="0" max="1"></genModel>
        <genModel modelType ="Position" min="0" max="1"></genModel>
        <genModel modelType ="Scale" min="0" max="1"></genModel>
        <genModel modelType ="Rotation" min="0" max="1"></genModel>
    </rootChildGenModels>
    <genModels>
        <genModel modelType="Composition">
            <requiredFunctions>addNodeAndRelease</requiredFunctions>
            <requiredFunctions>calculateStepByProgress</requiredFunctions>
            <requiredFunctions>buildStrength</requiredFunctions>
            <requiredFunctions>math.clamp</requiredFunctions>
            <requiredFunctions>getTransformLayerInfo</requiredFunctions>
            <requiredFunctions>getCurrentFrameIndex</requiredFunctions>
            <code type="initialize">
COMPOSITION = {
    FPS = ^{FPS}^,
    TOTAL_FRAME = ^{TotalFrame}^,
    SIZE = {
    WIDTH = ^{size.width}^,
    HEIGHT = ^{size.height}^
    },
    RepeatFrame = ^{RepeatFrame}^,
    MotionBlur = ^{MotionBlur}^,
    MotionBlurSize = ^{MotionBlurSize}^,
    repeTile = ^{repeTile}^,
    BG_COLOR = Vector4.create(^{color.r}^, ^{color.g}^, ^{color.b}^, 1.0)
}
            </code>
        <properties>
            <property name ="FPS" type="int" default="20" min="15" max="28">
                <setterString>COMPOSITION.FPS = ^{self}^</setterString>
            </property>
            <property name ="TotalFrame" type="int" default="23" min="1" max="50">
                <setterString>COMPOSITION.TOTAL_FRAME = ^{self}^</setterString>
            </property>
            <property name ="size" type="struct">
            <properties>
                <property name ="width" type="float" default="720.0" max="720.0">
                <setterString>COMPOSITION.SIZE.WIDTH = ^{self}^</setterString>
                </property>
                <property name ="height" type="float" default="1280.0" max="1280.0">
                <setterString>COMPOSITION.SIZE.HEIGHT = ^{self}^</setterString>
                </property>
            </properties>
            </property>
            <property name ="RepeatFrame" default="true" type="bool">
            <setterString>COMPOSITION.RepeatFrame = ^{self}^</setterString>
            </property>
            <property name ="MotionBlur" default="true" type="bool">
            <setterString>COMPOSITION.MotionBlur = ^{self}^</setterString>
            </property>
            <property name ="MotionBlurSize" default="1.0" type="float" min="0.1" max = "10.0">
            <setterString>COMPOSITION.MotionBlurSize = ^{self}^</setterString>
            </property>
            <property name ="repeTile"  default="true" type="bool">
            <setterString>COMPOSITION.repeTile = ^{self}^</setterString>
            </property>
            <property name ="color" type="struct">
                <properties>
                    <property name ="r" type="float" min="0">
                    <setterString>COMPOSITION.BG_COLOR.x = ^{self}^</setterString>
                    </property>
                    <property name ="g" type="float" min="0">
                    <setterString>COMPOSITION.BG_COLOR.y = ^{self}^</setterString>
                    </property>
                    <property name ="b" type="float" min="0">
                    <setterString>COMPOSITION.BG_COLOR.z = ^{self}^</setterString>
                    </property>
                </properties>
            </property>
        </properties>
        </genModel>
        <genModel modelType="AnchorPoint">
                <code type="initialize">
    ^{name}^ = {
    {frame = ^{frame}^, value = {['x'] = ^{value.x}^, ['y'] = ^{value.y}^}},
    ^{_getKeyframe(dataModels)}^}
                </code>
                <code type="key">TRANSFORM.AnchorPoint</code>
                <code type="setKeyframes">
:setTransformLayerKeyframes(TRANSFORM.AnchorPoint, ^{name}^)
                </code>
                <properties>
                <property name ="frame" type="int" max="100">
                <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].frame = ^{self}^</setterString>
                </property>
                <property name ="value" type="struct">
                    <properties>
                        <property name ="x" type="float" default="360.0">
                        <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].value['x'] = ^{self}^</setterString>
                        </property>
                        <property name ="y" type="float" default="640.0">
                        <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].value['y'] = ^{self}^</setterString>
                        </property>
                    </properties>
                </property>
                </properties>
            <childGenModels>
                <genModel modelType="Keyframe_point" min="0" max="100"></genModel>
            </childGenModels>
        </genModel>
        <genModel modelType="Position">
            <code type="initialize">
    ^{name}^ = {
        {frame = ^{frame}^, value = {['x'] = ^{value.x}^, ['y'] = ^{value.y}^}},
        ^{_getKeyframe(dataModels)}^}
            </code>
            <code type="key">TRANSFORM.Position</code>
            <code type="setKeyframes">
:setTransformLayerKeyframes(TRANSFORM.Position, ^{name}^)
            </code>
            <properties>
                    <property name ="frame" type="int" max="100">
                        <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].frame = ^{self}^</setterString>
                    </property>
                    <property name ="value" type="struct">
                            <properties>
                                <property name ="x" type="float" default="360.0">
                                    <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].frame = ^{self}^</setterString>
                                </property>
                                <property name ="y" type="float" default="640.0">
                                </property>
                            </properties>
                    </property>
                    </properties>
            <childGenModels>
                <genModel modelType="Keyframe_point" min="0" max="10-"></genModel>
            </childGenModels>
        </genModel>
        <genModel modelType="Scale">
            <code type="key">TRANSFORM.Scale</code>
            <code type="initialize">
    ^{name}^ = {
        {frame = ^{frame}^, value = ^{value}^},
        ^{_getKeyframe(dataModels)}^}
            </code>
<code type="setKeyframes">
:setTransformLayerKeyframes(TRANSFORM.Scale, ^{name}^)
</code>
            <properties>
            <property name ="frame" type="int" max="100">
                <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].frame = ^{self}^</setterString>
            </property>
            <property name ="value" type="int" default="100" min="0" max="100">
                <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].value = ^{self}^</setterString>
            </property>
            </properties>
            <childGenModels>
                <genModel modelType="Keyframe" min="0" max="100"></genModel>
            </childGenModels>
        </genModel>
        <genModel modelType="Rotation">
            <code type="initialize">
    ^{name}^ = {
        {frame = ^{frame}^, value = ^{value}^},
        ^{_getKeyframe(dataModels)}^}
            </code>
            <code type="key">TRANSFORM.Rotation</code>
            <code type="setKeyframes">
            :setTransformLayerKeyframes(TRANSFORM.Rotation, ^{name}^)
            </code>
            <properties>
            <property name ="frame" type="int" max="100">
            <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].frame = ^{self}^</setterString>
            </property>
            <property name ="value" type="int" default="100" min="0" max="100">
            <setterString>solidObject:getTransformLayer(^{->key}^).keyframes[1].value = ^{self}^</setterString>
            </property>
            </properties>
            <childGenModels>
                <genModel modelType="Keyframe" min="0" max="100"></genModel>
            </childGenModels>
        </genModel>
        <genModel modelType="Keyframe">
            <code type="initialize">
        {frame = ^{frame}^, easingType = EasingType.^{easingType}^, value = ^{value}^},
            </code>
            <properties>
            <property name ="frame" type="int" max="100">
            <setterString>solidObject:getTransformLayer(^{parentDataModel->key}^).keyframes[^{_getIndex(parentDataModel.dataModels, name)}^ +1].frame = ^{self}^</setterString>
            </property>
            <property name ="value" type="int" default="100" min="0" max="100">
            <setterString>solidObject:getTransformLayer(^{parentDataModel->key}^).keyframes[^{_getIndex(parentDataModel.dataModels, name)}^ +1].value = ^{self}^</setterString>
            </property>
            <property name ="easingType" type="enum" default="LINEAR">
            <setterString>solidObject:getTransformLayer(^{parentDataModel->key}^).keyframes[^{_getIndex(parentDataModel.dataModels, name)}^ +1].easingType = EasingType.^{self}^</setterString>
                    <enum>
                        <element>LINEAR</element>
                        <element>IN_QUAD</element>
                        <element>OUT_QUAD</element>
                        <element>IN_OUT_QUAD</element>
                        <element>OUT_IN_QUAD</element>
                        <element>IN_CUBIC</element>
                        <element>OUT_CUBIC</element>
                        <element>IN_OUT_CUBIC</element>
                        <element>OUT_IN_CUBIC</element>
                        <element>IN_QUART</element>
                        <element>OUT_QUART</element>
                        <element>IN_OUT_QUART</element>
                        <element>OUT_IN_QUART</element>
                        <element>IN_QUINT</element>
                        <element>OUT_QUINT</element>
                        <element>IN_OUT_QUINT</element>
                        <element>OUT_IN_QUINT</element>
                        <element>IN_SIN</element>
                        <element>OUT_SIN</element>
                        <element>OUT_QUAD</element>
                        <element>IN_OUT_SIN</element>
                        <element>OUT_IN_SIN</element>
                        <element>IN_EXPO</element>
                        <element>OUT_EXPO</element>
                        <element>IN_OUT_EXPO</element>
                        <element>OUT_IN_EXPO</element>
                        <element>IN_CIRCLE</element>
                        <element>OUT_CIRCLE</element>
                        <element>IN_OUT_CIRCLE</element>
                        <element>OUT_IN_CIRCLE</element>
                        <element>IN_ELASTIC</element>
                        <element>OUT_ELASTIC</element>
                        <element>IN_OUT_ELASTIC</element>
                        <element>OUT_IN_ELASTIC</element>
                        <element>IN_BACK</element>
                        <element>OUT_BACK</element>
                        <element>IN_OUT_BACK</element>
                        <element>OUT_IN_BACK</element>
                        <element>OUT_BOUNCE</element>
                        <element>IN_BOUNCE</element>
                        <element>IN_OUT_BOUNCE</element>
                        <element>OUT_IN_BOUNCE</element>
                    </enum>
                </property>
            </properties>
        </genModel>
        <genModel modelType="Keyframe_point">
            <code type="initialize">
    {frame = ^{frame}^, easingType = EasingType.^{easingType}^, value = {['x'] = ^{value.x}^, ['y'] = ^{value.y}^}},
            </code>
            <properties>
                <property name ="frame" type="int" max="100">
                <setterString>solidObject:getTransformLayer(^{parentDataModel->key}^).keyframes[^{_getIndex(parentDataModel.dataModels, name)}^ +1].frame = ^{self}^</setterString>
                </property>
                <property name ="value" type="struct">
                    <properties>
                        <property name ="x" type="float" default="360.0">
                        <setterString>solidObject:getTransformLayer(^{parentDataModel->key}^).keyframes[^{_getIndex(parentDataModel.dataModels, name)}^ +1].value['x'] = ^{self}^</setterString>
                        </property>
                        <property name ="y" type="float" default="640.0">
                        <setterString>solidObject:getTransformLayer(^{parentDataModel->key}^).keyframes[^{_getIndex(parentDataModel.dataModels, name)}^ +1].value['y'] = ^{self}^</setterString>
                        </property>
                    </properties>
                </property>
                <property name ="easingType" type="enum" default="LINEAR">
                <setterString>solidObject:getTransformLayer(^{parentDataModel->key}^).keyframes[^{_getIndex(parentDataModel.dataModels, name)}^ +1].easingType = EasingType.^{self}^</setterString>
                    <enum>
                <element>LINEAR</element>
                <element>IN_QUAD</element>
                <element>OUT_QUAD</element>
                <element>IN_OUT_QUAD</element>
                <element>OUT_IN_QUAD</element>
                <element>IN_CUBIC</element>
                <element>OUT_CUBIC</element>
                <element>IN_OUT_CUBIC</element>
                <element>OUT_IN_CUBIC</element>
                <element>IN_QUART</element>
                <element>OUT_QUART</element>
                <element>IN_OUT_QUART</element>
                <element>OUT_IN_QUART</element>
                <element>IN_QUINT</element>
                <element>OUT_QUINT</element>
                <element>IN_OUT_QUINT</element>
                <element>OUT_IN_QUINT</element>
                <element>IN_SIN</element>
                <element>OUT_SIN</element>
                <element>OUT_QUAD</element>
                <element>IN_OUT_SIN</element>
                <element>OUT_IN_SIN</element>
                <element>IN_EXPO</element>
                <element>OUT_EXPO</element>
                <element>IN_OUT_EXPO</element>
                <element>OUT_IN_EXPO</element>
                <element>IN_CIRCLE</element>
                <element>OUT_CIRCLE</element>
                <element>IN_OUT_CIRCLE</element>
                <element>OUT_IN_CIRCLE</element>
                <element>IN_ELASTIC</element>
                <element>OUT_ELASTIC</element>
                <element>IN_OUT_ELASTIC</element>
                <element>OUT_IN_ELASTIC</element>
                <element>IN_BACK</element>
                <element>OUT_BACK</element>
                <element>IN_OUT_BACK</element>
                <element>OUT_IN_BACK</element>
                <element>OUT_BOUNCE</element>
                <element>IN_BOUNCE</element>
                <element>IN_OUT_BOUNCE</element>
                <element>OUT_IN_BOUNCE</element>
                </enum>
            </property>
            </properties>
        </genModel>
    </genModels>
</genRule>
