material textured
{
    u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX

    sampler u_diffuseTexture
    {
        mipmap = true
        wrapS = CLAMP
        wrapT = CLAMP
        minFilter = LINEAR_MIPMAP_LINEAR
        magFilter = LINEAR
    }

    renderState
    {
      dstBlend = ONE_MINUS_SRC_ALPHA
      srcBlend = SRC_ALPHA
      blend = true
      cullFace = true
      depthTest = true
    }

    technique
    {
        pass
        {
            vertexShader = res/shaders/textured.vert
            fragmentShader = res/shaders/textured.frag
        }
    }
}

material colored
{
    u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX

    renderState
    {
        cullFace = true
        depthTest = true
    }

    technique
    {
        pass
        {
            vertexShader = res/shaders/colored.vert
            fragmentShader = res/shaders/colored.frag
        }
    }
}

material chroma_green : textured
{
    u_ambientColor = 0.0508761, 0.0508761, 0.0508761
    u_cameraPosition = CAMERA_WORLD_POSITION
    u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
    u_specularExponent = 20
    u_textureOffset = 0, -1
    u_chromakeyScale = 0.6, 0.6, 0.6

    sampler u_diffuseTexture
    {
        path = green.jpg
        wrapS = REPEAT
        wrapT = REPEAT
    }

    technique
    {
        pass
        {
            defines = CHROMAKEY;RENDER_MODE_V;SPECULAR
        }
    }
}

material default : textured
{
  u_ambientColor = 0.0508761, 0.0508761, 0.0508761
  u_cameraPosition = CAMERA_WORLD_POSITION
  u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
  u_specularExponent = 25

  sampler u_diffuseTexture
  {
      path = mask.png
      wrapS = REPEAT
      wrapT = REPEAT
  }

  technique
  {
      pass
      {
          defines = SPECULAR
      }
  }
}

material face : textured
{
    u_ambientColor = 0.0508761, 0.0508761, 0.0508761
    u_specularExponent = 25

    sampler u_diffuseTexture
    {
        path = green.jpg
        wrapS = REPEAT
        wrapT = REPEAT
    }

    technique
    {
        pass
        {
            defines = SPECULAR
        }
    }
}
